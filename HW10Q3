 dir.create("~/Week10")
 setwd("~/Week10/")
 list.files(all.files = T)
 objects()   # Should be empty.
#
 url="https://raw.githubusercontent.com/vtdrfuka/BSE5304_2022/main/Lab09Sol.R"
 download.file(url,"Lab09Th.R")
 file.edit("Lab09Th.R")

 
 #
 #
if (!require("pacman")) install.packages("pacman")
pacman::p_load(httr,EcoHydRology,curl,elevatr,raster,rgdal,
                  data.table,foreign,maptools,dataRetrieval,gdistance)
setwd("~/Week10/")
 #
 # Note we have a new library to access USGS Waterdata
 # https://owi.usgs.gov/R/dataRetrieval.html
 # https://owi.usgs.gov/R/training-curriculum/usgs-packages/dataRetrieval-readNWIS/
 #
  ?dataRetrieval  # Review the man page for this package
  ?readNWISuv
  ?readNWISdv
  ?readNWISdata
 #
 # Need to figure out which data to download. 
 # https://nwis.waterdata.usgs.gov/nwis/pmcodes?radio_pm_search=param_group&pm_group=All+--+include+all+parameter+groups&pm_search=&casrn_search=&srsname_search=&format=html_table&show=parameter_group_nm&show=parameter_nm&show=casrn&show=srsname&show=parameter_units
 # 
 ##############################################
 # 14206900 LICK RUN ABOVE PATTON AVENUE AT ROANOKE, VA
 ##############################################
siteNo = "14206900"
  parameterCd = c("00060","00065")
  start.date = "2017-05-01"  # Not frozen to not frozen
  end.date = "2017-11-01"    # to still not frozen
 
  USGS14206900=list()   # Organize the data in a nice list as in previous labs
  USGS14206900[["flowdata"]]<- readNWISuv(siteNumbers = siteNo,parameterCd = parameterCd,startDate = start.date,endDate = end.date)
  head(USGS14206900$flowdata)  # Note that we have 00060 and 00065...
 #  agency_cd	site_no        	dateTime X_00060_00000 X_00060_00000_cd
 #1  	USGS 14206900 2017-05-01 04:00:00      	6.38            	A
 #2  	USGS 14206900 2017-05-01 04:05:00      	6.38            	A
 #  X_00065_00000 X_00065_00000_cd tz_cd
 #1      	2.74            	A   UTC
 #2      	2.74            	A   UTC
 #
 # And of course we want to work in SI units so:
  USGS14206900$flowdata$depth_m=USGS14206900$flowdata$X_00065_00000*0.3048
 # m/ft depth
  USGS14206900$flowdata$cms=USGS14206900$flowdata$X_00060_00000*.02832
 # m3/ft3 flow
 #
 # Let's add in the USGS gage site information to the list and inspect
  USGS14206900[["site"]]=readNWISsite(siteNo)
  head(USGS14206900$site)
  class(USGS14206900$site$dec_lat_va)
 #
 # Set the Manning Coefficient in the USGS Gage's Site Table
 #
  USGS14206900$site$man_n=.035/1.49
 #
 # Create a SpatialPointsDataFrame out of the site dataframe in the USGS list
  coordinates(USGS14206900$site)=~dec_long_va+dec_lat_va
 #
#Might be nice to have a function that gets these data, no?
    
  make_usgs_gage_list=function(siteNo = "14206900",
                               parameterCd = c("00060","00065"),
                               start.date = "2017-05-01",  # Not frozen to not frozen
                               end.date = "2017-11-01"){    # to still not frozen
    
  USGSlist=list()   # Organize the data in a nice list as in previous labs
    USGSlist[["flowdata"]]<- readNWISuv(siteNumbers = siteNo,parameterCd = parameterCd,startDate = start.date,endDate = end.date)
    head(USGSlist$flowdata)  # Note that we have 00060 and 00065...
    # And of course we want to work in SI units so:
    USGSlist$flowdata$depth_m=USGSlist$flowdata$X_00065_00000*0.3048
    # m/ft depth
    USGSlist$flowdata$cms=USGSlist$flowdata$X_00060_00000*.02832
    # m3/ft3 flow
    USGSlist[["site"]]=readNWISsite(siteNo)
    head(USGSlist$site)
    class(USGSlist$site$dec_lat_va)
    #
    # Set the Manning Coefficient in the USGS Gage's Site Table
    #
    USGSlist$site$man_n=.035/1.49
    #
    # Create a SpatialPointsDataFrame out of the site dataframe in the USGS list
    coordinates(USGSlist$site)=~dec_long_va+dec_lat_va
    #
    return(USGSlist)
  }
  
 
  USGS453320122483701=make_usgs_gage_list(siteNo = "453320122483701")
  USGS02054530=make_usgs_gage_list(siteNo ="453004122510301")
  USGS14206900=make_usgs_gage_list(siteNo ="14206900" )
 
  
  
 

  ab_ll=rbind(USGS453320122483701$site,
                 USGS14206900$site,
                 USGS14206900$site,
                 USGS14206900$site,
                 USGS14206900$site)
  class(ab_ll)
  ab_ll@proj4string
  proj4_utm = paste0("+proj=utm +zone=",
                      trunc((180+coordinates(USGS14206900$site)[1])/6+1), 
                      " +datum=WGS84 +units=m +no_defs")
  print(proj4_utm)
 # Lat/Lon (_ll) is much easier!
  proj4_ll = "+proj=longlat"
  crs_ll=CRS(proj4_ll)
  crs_utm=CRS(proj4_utm)
  proj4string(ab_ll)=proj4_ll
  ab_utm=spTransform(ab_ll,crs_utm)
  ab_utm@coords
  mydem=get_aws_terrain(locations=ab_utm@coords, 
                         z = 12, prj = proj4_utm,expand=1)
  #
 # Lets plot the DEM and the gage locations so we can guess 
 # what gages connect with what gages
 #
  plot(mydem)
  plot(ab_utm,add=T)
  text(ab_utm, labels=ab_utm@data$site_no, cex=0.6, font=2,pos=1)
 # From Lab02, I know I can get an overview of streams with the 
 # USGS H
  Sys.unsetenv("http_proxy"); Sys.unsetenv("https_proxy")
  url="http://prd-tnm.s3-website-us-west-2.amazonaws.com/StagedProducts/Hydrography/NHD/HU8/HighResolution/Shape/NHD_H_17090010_HU8_Shape.zip"
  curl_download(url,"NHD_H_17090010_HU8_Shape.zip")
  unzip("NHD_H_17090010_HU8_Shape.zip",exdir="170900101")
  streams=readOGR("17090010/Shape/NHDFlowline.dbf")
  streams_utm=spTransform(streams,crs_utm)
  plot(streams_utm,col="blue",add=T)
  
  
USGS453320122483701$flowdata=USGS453320122483701$flowdata[,c(1,2,3,4,5,8,10)]
  #
  ###########################################
  # 453320122483701 ROANOKE RIVER AT NIAGARA, VA
  ###########################################
  
head(USGS453320122483701$flowdata,2)  # Note that we have 00060 but missing 00065...

#  agency_cd  site_no            dateTime X_00060_00000 X_00060_00000_cd tz_cd
#1      USGS 453320122483701 2017-05-01 04:00:00           876                A   UTC
#2      USGS 453320122483701 2017-05-01 04:15:00           876                A   UTC
# Hrm? No depth associated with the flow? BUT USGS maintains rating curves
# explain what a rating curve is: https://en.wikipedia.org/wiki/Rating_curve
# and use the readNWISrating() function to grab it for this gage
USGS453320122483701[["rating"]]=readNWISrating(USGS453320122483701$site$site_no)
plot(USGS453320122483701$rating$DEP,USGS453320122483701$rating$INDEP,xlab="DEP",ylab="INDEP")
#

# Note that this is very similar to what we saw in the previous gage's results
# and as it turns out, we can use it to estimate a 00065 measurement as 
# we did for the previous gage.
 USGS453320122483701$flowdata$X_00065_00000=approx(USGS453320122483701$rating$DEP,
 USGS453320122483701$rating$INDEP, xout = USGS453320122483701$flowdata$X_00060_00000, ties = min)$y
 points(USGS453320122483701$flowdata$X_00060_00000,USGS453320122483701$flowdata$X_00065_00000,
  col="red")
#
 USGS453320122483701$flowdata$depth_m=USGS453320122483701$flowdata$X_00065_00000*0.3048
# m/ft depth
#

 # A quick readthrough of the Example 1: Hiking around Maunga Whau
 # in the package vignette. 
 # vignette("Overview", package = "gdistance")
 # Set the starting and ending locations
 # determine the river reach length and slope using the gdistance package.
 #
  A=SpatialPoints(USGS14206900$site)# Up gradient site Lick Run
  B=SpatialPoints(USGS453320122483701$site) # Down gradient site ROA River atNiagara
  proj4string(A)=proj4_ll
  proj4string(B)=proj4_ll
  A_utm=spTransform(A,crs_utm)
  B_utm=spTransform(B,crs_utm)
 # Cut the DEM down to a more manageable size
  cropmydem=crop(mydem,extend(extent(ab_utm),600))
  cropmydem=trim(cropmydem)
  cropmydem=cropmydem*1000.0
  plot(cropmydem)
  plot(ab_utm,add=T)
 # Set up the weighting functions
  altDiff <- function(x){x[2] - x[1]}
  hd <- transition(cropmydem, altDiff, 8, symm=FALSE)
  slope <- geoCorrection(hd)
  adj <- adjacent(cropmydem, cells=1:ncell(cropmydem), pairs=TRUE, directions=8)
  speed <- slope
  speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
  Conductance <- geoCorrection(speed)
 # Find and plot the flow path
  AtoB <- shortestPath(Conductance, A_utm, B_utm, output="SpatialLines")
  plot(AtoB,add=T)
  plot(streams_utm,col="blue",add=T)
  plot(AtoB,add=T)
  SpatialLinesLengths(AtoB)
  USGS14206900$site$L=SpatialLinesLengths(AtoB) # km to m
  USGS14206900$site$L # reach length in m
 #
 #
 # Getting slope, we will extract the slope for points A and B from the DEM and # divide the difference by the length in m, this gives us a much better 
 # estimate of slope than taking the point slopes at the gage site
 #
USGS14206900$site$slope=(raster::extract(mydem,A_utm)-
                                raster::extract(mydem,B_utm))/USGS14206900$site$L
 

 USGS14206900$flowdata$B=(USGS14206900$site$man_n*
                               USGS14206900$flowdata$cms)/(USGS14206900$flowdata$depth_m^(5/3)*
                                                               sqrt(USGS14206900$site$slope))
 head(USGS14206900$flowdata)
#  agency_cd	site_no        	dateTime X_00060_00000 X_00060_00000_cd
#1  	USGS 05267000 2017-05-01 04:00:00      	6.38            	A
#2  	USGS 05267000 2017-05-01 04:05:00      	6.38            	A
#  X_00065_00000 X_00065_00000_cd tz_cd   	cms  depth_m    	B
#1      	2.74            	A   UTC 0.1806816 0.835152 0.103032
#2      	2.74            	A   UTC 0.1806816 0.835152 0.103032
#
# Lets look at how B changes with flow.    
 plot(USGS14206900$flowdata$dateTime,USGS14206900$flowdata$B, main="LICK RUN TO ROANOKE RIVER AT NIAGARA, VA")
# Does this seem reasonable (...like order of magnitude reasonable)? You can 
# perform a quick and dirty check using google earth and measuring the channel 
# width in a few places.
#
 plot(USGS14206900$flowdata$cms,USGS14206900$flowdata$depth_m, main="LICK RUN TO ROANOKE RIVER AT NIAGARA, VA")

 # ck
#USGS14206900$flowdata$ck = ???
   # ANS
    USGS14206900$flowdata$ck =
   5/3*sqrt(USGS14206900$site$slope)/USGS14206900$site$man_n*
   (USGS14206900$flowdata$depth_m^(2/3))
 #
#USGS14206900$flowdata$dt = ???
    USGS14206900$flowdata$dt =
   USGS14206900$site$L/USGS14206900$flowdata$ck
 
  plot(USGS14206900$flowdata$dateTime,USGS14206900$flowdata$dt)
  USGS14206900$flowdata$outTime=USGS14206900$flowdata$dateTime+
   USGS14206900$flowdata$dt
 
 # Find beginning of  Waves
  USGS14206900$flowdata$newwave=
   USGS14206900$flowdata$cms *1.1 <
   data.table::shift(USGS14206900$flowdata$cms)
  summary(USGS14206900$flowdata$newwave)
 # Add plot of the point found
  len=length(USGS14206900$flowdata$newwave)
  USGS14206900$flowdata$newwave[is.na(USGS14206900$flowdata$newwave)]=F
 # Removes repeated finds by going through loop backwords
  for (i in seq(len,2)){
   print(i)
   if(USGS14206900$flowdata$newwave[i]==T &
      USGS14206900$flowdata$newwave[i-1]==T){
     USGS14206900$flowdata$newwave[i]=F
   }
 }
  plot(USGS14206900$flowdata$dateTime,USGS14206900$flowdata$cms,type="l")
  points(USGS14206900$flowdata$dateTime[USGS14206900$flowdata$newwave],
          USGS14206900$flowdata$cms[USGS14206900$flowdata$newwave],col=2)
 
 # Find the time locations where waves begin
  which(USGS14206900$flowdata$newwave == TRUE)
  plot(USGS14206900$flowdata$dateTime,USGS14206900$flowdata$cms,
        type="l",xlim=c(USGS14206900$flowdata$dateTime[1109],
                        USGS14206900$flowdata$dateTime[1109+200]))
  lines(USGS14206900$flowdata$outTime,USGS14206900$flowdata$cms,col=2)
 
